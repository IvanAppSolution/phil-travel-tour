// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  role           String    @default("user") // roles: user, admin
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  createdTravels Travel[]
  savedBookings  String[]  @default([]) // Array of trips object {tripId: String, locationId: String[], startDate: DateTime, endDate: DateTime}

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Order {
  id        String          @id @default(cuid())
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  travel    Travel          @relation(fields: [travelId], references: [id])
  travelId  String
  tripId    String[] // Array of location IDs
  travelers TravelerNames[]
  email     String
  product   String
  quantity  Int
  startDate DateTime
  endDate   DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Travel {
  id               String  @id @default(cuid())
  title            String
  subTitle         String? @db.VarChar(255)
  description      String? @db.Text
  shortDescription String? @db.VarChar(255)
  noOfTravelDays   String?
  imageUrl         String?
  coverImagesUrl   String[]   @default([])
  pricePerPerson   Float?
  priceDescription  String? @db.VarChar(255)
  discountPrice    Float?
  discountPercent  Int?
  discountDescription String? @db.VarChar(255)
  bookingNote     String? @db.Text
  amenities       String[]   @default([]) // Array of amenities  
  isPublished     Boolean @default(false)
  isFeatured      Boolean @default(false)  
  createdBy        User    @relation(fields: [createdById], references: [id])
  createdById      String
  orders           Order[]
  trips            Trip[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trip {
  id               String  @id @default(cuid())
  title            String
  subTitle         String? @db.VarChar(255)
  description      String? @db.Text
  shortDescription String? @db.VarChar(255)
  imageUrl         String?
  imagesUrl        String[]   @default([])
  travel           Travel  @relation(fields: [travelId], references: [id])
  travelId         String

  locations Location[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id               String   @id @default(cuid())
  locationTitle    String
  shortDescription String?  @db.VarChar(255)
  description      String?  @db.Text
  imageUrl         String[]
  lat              Float
  lng              Float
  trip             Trip     @relation(fields: [tripId], references: [id])
  tripId           String
  order            Int      @default(0)
  createdAt        DateTime @default(now())
}

model TravelerNames {
  id          String   @id @default(cuid())
  name        String
  email       String?
  age         Int?
  gender      String?
  phoneNumber String?
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
